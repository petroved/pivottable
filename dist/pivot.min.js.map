{"version":3,"sources":["/source/pivot.coffee","pivot.min.js"],"names":["callWithJQuery","indexOf","item","i","l","this","length","slice","bind","fn","me","apply","arguments","hasProp","hasOwnProperty","pivotModule","exports","module","require","define","amd","jQuery","$","PivotData","addSeparators","aggregatorTemplates","aggregators","dayNamesEn","derivers","exportTableToCSV","getSort","locales","mthNamesEn","naturalSort","normalizeTable","numberFormat","pivotTableRenderer","renderers","sortAs","usFmt","usFmtInt","usFmtPct","zeroPad","nStr","thousandsSep","decimalSep","rgx","x","x1","x2","split","test","replace","opts","defaults","digitsAfterDecimal","scaler","prefix","suffix","showZero","extend","result","isNaN","isFinite","toFixed","count","formatter","data","rowKey","colKey","push","value","format","countUnique","arg","attr","uniq","record","ref","call","numInputs","listUnique","sep","join","sum","parseFloat","min","val","Math","max","average","len","sumOverSum","denom","num","sumNum","sumDenom","sumOverSumBound80","upper","res","sign","sqrt","fractionOf","wrapped","type","selector","total","row","col","inner","getAggregator","tpl","Count","Count Unique Values","List Unique Values","Sum","Integer Sum","Average","Minimum","Maximum","Sum over Sum","80% Upper Bound","80% Lower Bound","Sum as Fraction of Total","Sum as Fraction of Rows","Sum as Fraction of Columns","Count as Fraction of Total","Count as Fraction of Rows","Count as Fraction of Columns","Table","pvtData","Table Barchart","barchart","Heatmap","heatmap","Row Heatmap","Col Heatmap","en","localeStrings","renderError","computeError","uiRenderError","selectAll","selectNone","tooMany","filterResults","totals","vs","by","number","substr","bin","binWidth","dateFormat","formatString","utcOutput","mthNames","dayNames","utc","date","Date","parse","m","p","_this","as","bs","a","a1","b","b1","rd","rx","rz","String","toLowerCase","match","shift","order","mapping","sorters","sort","isFunction","$table","headerPattern","headers","removeCount","separator","find","each","cell","results","parseInt","removeAttr","after","clone","index","parent","get","cellIndex","next","before","headerKey","text","trim","RegExp","children","header","remove","filename","$rows","colDelim","csv","exportTable","rowDelim","tmpColDelim","tmpRowDelim","fromCharCode","map","$cols","$row","j","$col","input","getRowKeys","getColKeys","sortKeys","arrSort","aggregator","aggregatorName","colAttrs","cols","rowAttrs","rows","valAttrs","vals","tree","rowKeys","colKeys","rowTotals","colTotals","allTotal","sorted","forEachRecord","derivedAttributes","filter","processRecord","f","addRecord","compactRecord","k","len1","results1","tblCols","isEmptyObject","v","isArray","Error","convertToArray","convertValueToClassname","ugly","str","Array","prototype","attrs","sortersArr","comparison","sorter","flatColKey","flatRowKey","len2","n","ref1","ref2","ref3","agg","pivotUtilities","pivotData","c","cellHeader","cellValue","htmlEl","r","spanSize","td","th","totalAggregator","tr","txt","document","createElement","className","arr","noDraw","stop","setAttribute","appendChild","textContent","innerHTML","formatHtml","pivot","e","error","error1","renderer","rendererOptions","console","stack","html","hasChildNodes","removeChild","lastChild","append","pivotUI","inputOpts","overwrite","locale","attrLength","axisValues","colList","existingOpts","initialRender","len3","len4","o","pivotTable","q","ref4","refresh","refreshDelayed","rendererControl","shownAttributes","tr1","tr2","uiTable","unusedAttrsVerticalAutoCutoff","unusedAttrsVerticalAutoOverride","hiddenAttributes","menuLimit","exclusions","inclusions","unusedAttrsVertical","autoSortUnusedAttrs","onRefresh","base","class","addClass","appendTo","attrElem","btns","checkContainer","filterItem","filterItemExcluded","hasExcludedItem","keys","showFilterList","triangleLink","updateFilter","valueList","hide","prop","placeholder","testString","show","unselectedCount","removeClass","toggle","clickLeft","clickTop","currentTarget","position","left","top","css","prepend","inArray","rendererName","len5","newDropdown","numInputsToProcess","pivotUIOptions","pvtVals","ref5","ref6","s","subopts","t","unusedAttrsContainer","not","excludedItems","ref7","inclusionsInfo","setTimeout","sortable","update","ui","sender","connectWith","items","scope","colorGen","heatmapper","numCols","numRows","color","hexGen","hex","intensity","round","toString","colorFor","forEachCell","values","elem","barcharter","wrapper","height","bottom","right","background-color","padding-left","padding-right","padding","padding-top","text-align"],"mappings":"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","file":"pivot.min.js","sourcesContent":["callWithJQuery = (pivotModule) ->\n    if typeof exports is \"object\" and typeof module is \"object\" # CommonJS\n        pivotModule require(\"jquery\")\n    else if typeof define is \"function\" and define.amd # AMD\n        define [\"jquery\"], pivotModule\n    # Plain browser env\n    else\n        pivotModule jQuery\n\ncallWithJQuery ($) ->\n\n    ###\n    Utilities\n    ###\n\n    addSeparators = (nStr, thousandsSep, decimalSep) ->\n        nStr += ''\n        x = nStr.split('.')\n        x1 = x[0]\n        x2 = if x.length > 1 then  decimalSep + x[1] else ''\n        rgx = /(\\d+)(\\d{3})/\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2') while rgx.test(x1)\n        return x1 + x2\n\n    numberFormat = (opts) ->\n        defaults =\n            digitsAfterDecimal: 2, scaler: 1,\n            thousandsSep: \",\", decimalSep: \".\"\n            prefix: \"\", suffix: \"\"\n            showZero: false\n        opts = $.extend defaults, opts\n        (x) ->\n            return \"\" if isNaN(x) or not isFinite(x)\n            return \"\" if x == 0 and not opts.showZero\n            result = addSeparators (opts.scaler*x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep\n            return \"\"+opts.prefix+result+opts.suffix\n\n    #aggregator templates default to US number formatting but this is overrideable\n    usFmt = numberFormat()\n    usFmtInt = numberFormat(digitsAfterDecimal: 0)\n    usFmtPct = numberFormat(digitsAfterDecimal:1, scaler: 100, suffix: \"%\")\n\n    aggregatorTemplates =\n        count: (formatter=usFmtInt) -> () -> (data, rowKey, colKey) ->\n            count: 0\n            push:  -> @count++\n            value: -> [ @count ]\n            format: formatter\n\n        countUnique: (formatter=usFmtInt) -> ([attr]) -> (data, rowKey, colKey) ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> [ @uniq.length ]\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        listUnique: (sep) -> ([attr]) -> (data, rowKey, colKey)  ->\n            uniq: []\n            push: (record) -> @uniq.push(record[attr]) if record[attr] not in @uniq\n            value: -> [ @uniq.join sep ]\n            format: (x) -> x\n            numInputs: if attr? then 0 else 1\n\n        sum: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            push: (record) -> @sum += parseFloat(record[attr]) if not isNaN parseFloat(record[attr])\n            value: -> [ @sum ]\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        min: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.min(x, @val ? x)\n            value: -> [ @val ]\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        max: (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            val: null\n            push: (record) ->\n                x = parseFloat(record[attr])\n                if not isNaN x then @val = Math.max(x, @val ? x)\n            value: -> [ @val ]\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        average:  (formatter=usFmt) -> ([attr]) -> (data, rowKey, colKey) ->\n            sum: 0\n            len: 0\n            push: (record) ->\n                if not isNaN parseFloat(record[attr])\n                    @sum += parseFloat(record[attr])\n                    @len++\n            value: -> [ @sum/@len ]\n            format: formatter\n            numInputs: if attr? then 0 else 1\n\n        sumOverSum: (formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: -> [ @sumNum/@sumDenom ]\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        sumOverSumBound80: (upper=true, formatter=usFmt) -> ([num, denom]) -> (data, rowKey, colKey) ->\n            sumNum: 0\n            sumDenom: 0\n            push: (record) ->\n                @sumNum   += parseFloat(record[num])   if not isNaN parseFloat(record[num])\n                @sumDenom += parseFloat(record[denom]) if not isNaN parseFloat(record[denom])\n            value: ->\n                sign = if upper then 1 else -1\n                res = (0.821187207574908/@sumDenom + @sumNum/@sumDenom + 1.2815515655446004*sign*\n                    Math.sqrt(0.410593603787454/ (@sumDenom*@sumDenom) + (@sumNum*(1 - @sumNum/ @sumDenom))/ (@sumDenom*@sumDenom)))/\n                    (1 + 1.642374415149816/@sumDenom)\n                return [ res ]\n            format: formatter\n            numInputs: if num? and denom? then 0 else 2\n\n        fractionOf: (wrapped, type=\"total\", formatter=usFmtPct) -> (x...) -> (data, rowKey, colKey) ->\n            selector: {total:[[],[]],row:[rowKey,[]],col:[[],colKey]}[type]\n            inner: wrapped(x...)(data, rowKey, colKey)\n            push: (record) -> @inner.push record\n            format: formatter\n            value: -> [ @inner.value() / data.getAggregator(@selector...).inner.value() ]\n            numInputs: wrapped(x...)().numInputs\n\n    #default aggregators & renderers use US naming and number formatting\n    aggregators = do (tpl = aggregatorTemplates) ->\n        \"Count\":                tpl.count(usFmtInt)\n        \"Count Unique Values\":  tpl.countUnique(usFmtInt)\n        \"List Unique Values\":   tpl.listUnique(\", \")\n        \"Sum\":                  tpl.sum(usFmt)\n        \"Integer Sum\":          tpl.sum(usFmtInt)\n        \"Average\":              tpl.average(usFmt)\n        \"Minimum\":              tpl.min(usFmt)\n        \"Maximum\":              tpl.max(usFmt)\n        \"Sum over Sum\":         tpl.sumOverSum(usFmt)\n        \"80% Upper Bound\":      tpl.sumOverSumBound80(true, usFmt)\n        \"80% Lower Bound\":      tpl.sumOverSumBound80(false, usFmt)\n        \"Sum as Fraction of Total\":     tpl.fractionOf(tpl.sum(),   \"total\", usFmtPct)\n        \"Sum as Fraction of Rows\":      tpl.fractionOf(tpl.sum(),   \"row\",   usFmtPct)\n        \"Sum as Fraction of Columns\":   tpl.fractionOf(tpl.sum(),   \"col\",   usFmtPct)\n        \"Count as Fraction of Total\":   tpl.fractionOf(tpl.count(), \"total\", usFmtPct)\n        \"Count as Fraction of Rows\":    tpl.fractionOf(tpl.count(), \"row\",   usFmtPct)\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\",   usFmtPct)\n\n    renderers =\n        \"Table\":          (pvtData, opts) ->   pivotTableRenderer(pvtData, opts)\n        \"Table Barchart\": (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).barchart()\n        \"Heatmap\":        (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap()\n        \"Row Heatmap\":    (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap(\"rowheatmap\")\n        \"Col Heatmap\":    (pvtData, opts) -> $(pivotTableRenderer(pvtData, opts)).heatmap(\"colheatmap\")\n\n    locales =\n        en:\n            aggregators: aggregators\n            renderers: renderers\n            localeStrings:\n                renderError: \"An error occurred rendering the PivotTable results.\"\n                computeError: \"An error occurred computing the PivotTable results.\"\n                uiRenderError: \"An error occurred rendering the PivotTable UI.\"\n                selectAll: \"Select All\"\n                selectNone: \"Select None\"\n                tooMany: \"(too many to list)\"\n                filterResults: \"Filter results\"\n                totals: \"Totals\" #for table renderer\n                vs: \"vs\" #for gchart renderer\n                by: \"by\" #for gchart renderer\n\n    #dateFormat deriver l10n requires month and day names to be passed in directly\n    mthNamesEn = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]\n    dayNamesEn = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n    zeroPad = (number) -> (\"0\"+number).substr(-2,2)\n\n    derivers =\n        bin: (col, binWidth) -> (record) -> record[col] - record[col] % binWidth\n        dateFormat: (col, formatString, utcOutput=false, mthNames=mthNamesEn, dayNames=dayNamesEn) ->\n            utc = if utcOutput then \"UTC\" else \"\"\n            (record) -> #thanks http://stackoverflow.com/a/12213072/112871\n                date = new Date(Date.parse(record[col]))\n                if isNaN(date) then return \"\"\n                formatString.replace /%(.)/g, (m, p) ->\n                    switch p\n                        when \"y\" then date[\"get#{utc}FullYear\"]()\n                        when \"m\" then zeroPad(date[\"get#{utc}Month\"]()+1)\n                        when \"n\" then mthNames[date[\"get#{utc}Month\"]()]\n                        when \"d\" then zeroPad(date[\"get#{utc}Date\"]())\n                        when \"w\" then dayNames[date[\"get#{utc}Day\"]()]\n                        when \"x\" then date[\"get#{utc}Day\"]()\n                        when \"H\" then zeroPad(date[\"get#{utc}Hours\"]())\n                        when \"M\" then zeroPad(date[\"get#{utc}Minutes\"]())\n                        when \"S\" then zeroPad(date[\"get#{utc}Seconds\"]())\n                        else \"%\" + p\n\n    naturalSort = (as, bs) => #thanks http://stackoverflow.com/a/4373421/112871\n        rx = /(\\d+)|(\\D+)/g\n        rd = /\\d/\n        rz = /^0/\n        if typeof as is \"number\" or typeof bs is \"number\"\n            return 1  if isNaN(as)\n            return -1  if isNaN(bs)\n            return as - bs\n        a = String(as).toLowerCase()\n        b = String(bs).toLowerCase()\n        return 0  if a is b\n        return (if a > b then 1 else -1)  unless rd.test(a) and rd.test(b)\n        a = a.match(rx)\n        b = b.match(rx)\n        while a.length and b.length\n            a1 = a.shift()\n            b1 = b.shift()\n            if a1 isnt b1\n                if rd.test(a1) and rd.test(b1)\n                    return a1.replace(rz, \".0\") - b1.replace(rz, \".0\")\n                else\n                    return (if a1 > b1 then 1 else -1)\n        a.length - b.length\n\n    sortAs = (order) ->\n        mapping = {}\n        for i, x of order\n            mapping[x] = i\n        (a, b) ->\n            if mapping[a]? and mapping[b]?\n                return mapping[a] - mapping[b]\n            else if mapping[a]?\n                return -1\n            else if mapping[b]?\n                return 1\n            else\n                return naturalSort(a,b)\n\n    getSort = (sorters, attr) ->\n        sort = sorters(attr)\n        if $.isFunction(sort)\n            return sort\n        else\n            return naturalSort\n\n    normalizeTable = ($table) ->\n        # 1. Normalize colspan by creating elements for each\n        $table.find('th[colspan], td[colspan]').each ->\n          cell  = $(this)\n          count = parseInt(cell.attr('colspan')) - 1\n          cell.removeAttr('colspan')\n       \n          while count > 0\n            cell.after(cell.clone())\n            cell = cell\n            count--\n       \n        # 2. Normalize rowspan by creating rows for each\n        $table.find('th[rowspan], td[rowspan]').each ->\n          cell  = $(this)\n          row   = cell.parent()\n          index = cell.get(0).cellIndex\n          count = parseInt(cell.attr('rowspan')) - 1\n          cell.removeAttr('rowspan')\n       \n          while count > 0\n            row   = row.next()\n            row.find(\"td:nth-child(#{index + 1}), th:nth-child(#{index + 1})\").before(cell.clone())\n            count--\n            \n        # 3. Merge headers with same key, so if you have 3 headers b/c of colspan grouping, they will become 1\n        headers     = []\n        separator = \" - \"\n        removeCount = 0\n        headerPattern = null\n        \n        $table.find('tr').each (i) ->\n          cell = $(this).find('td:nth-child(1), th:nth-child(1)')\n          text = cell.text().trim()\n    \n          if i == 0\n            headerKey = text\n            headerPattern = new RegExp(\"^#{headerKey}$\", 'i')\n            $(this).children().each ->\n              headers.push([$(this).text().trim()])\n          else\n            # if the next row matches, then we still continue, b/c we want to remove these rows\n            if text.match(headerPattern)\n              $(this).children().each (i) ->\n                header  = headers[i]\n                text    = $(this).text().trim()\n                header.push(text) if header.indexOf(text) == -1\n    \n              $(this).remove()\n            else\n              # otherwise, we don't need to keep iterating b/c we're past the header section\n              return false\n              \n          $table.find('tr:first').children().each (i) ->\n            $(this).text(headers[i].join(separator))\n\n    exportTableToCSV = (filename) ->\n        \n        exportTable = $(\".pvtTable\").clone()\n        \n        normalizeTable exportTable\n        $rows = exportTable.find(\"tr:has(td),tr:has(th)\")\n        \n        # Temporary delimiter characters unlikely to be typed by keyboard\n        # This is to avoid accidentally splitting the actual contents\n        tmpColDelim = String.fromCharCode(11) # vertical tab character\n        tmpRowDelim = String.fromCharCode(0) # null character\n        \n        # actual delimiter characters for CSV format\n        colDelim = \"\\\",\\\"\"\n        rowDelim = \"\\\"\\r\\n\\\"\"\n        \n        # Grab text from table into CSV formatted string\n        # escape double quotes\n        csv = \"\\\"\" + $rows.map((i, row) ->\n          $row = $(row)\n     \n          $cols = $row.find(\"td,th\")\n          $cols.map((j, col) ->\n            $col = $(col)\n            text = $col.text()\n            text.replace \"\\\"\", \"\\\"\\\"\"\n          ).get().join tmpColDelim\n        ).get().join(tmpRowDelim).split(tmpRowDelim).join(rowDelim).split(tmpColDelim).join(colDelim) + \"\\\"\"\n\n        return csv\n\n    ###\n    Data Model class\n    ###\n\n    class PivotData\n        constructor: (input, opts) ->\n            @aggregator = opts.aggregator\n            @aggregatorName = opts.aggregatorName\n            @colAttrs = opts.cols\n            @rowAttrs = opts.rows\n            @valAttrs = opts.vals\n            @sorters = opts.sorters\n            @tree = {}\n            @rowKeys = []\n            @colKeys = []\n            @rowTotals = {}\n            @colTotals = {}\n            @allTotal = @aggregator(this, [], [])\n            @sorted = false\n\n            # iterate through input, accumulating data for cells\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) =>\n                @processRecord(record) if opts.filter(record)\n\n        #can handle arrays or jQuery selections of tables\n        @forEachRecord = (input, derivedAttributes, f) ->\n            if $.isEmptyObject derivedAttributes\n                addRecord = f\n            else\n                addRecord = (record) ->\n                    record[k] = v(record) ? record[k] for k, v of derivedAttributes\n                    f(record)\n\n            #if it's a function, have it call us back\n            if $.isFunction(input)\n                input(addRecord)\n            else if $.isArray(input)\n                if $.isArray(input[0]) #array of arrays\n                    for own i, compactRecord of input when i > 0\n                        record = {}\n                        record[k] = compactRecord[j] for own j, k of input[0]\n                        addRecord(record)\n                else #array of objects\n                    addRecord(record) for record in input\n            else if input instanceof jQuery\n                tblCols = []\n                $(\"thead > tr > th\", input).each (i) -> tblCols.push $(this).text()\n                $(\"tbody > tr\", input).each (i) ->\n                    record = {}\n                    $(\"td\", this).each (j) -> record[tblCols[j]] = $(this).text()\n                    addRecord(record)\n            else\n                throw new Error(\"unknown input format\")\n\n        #converts to [{attr:val, attr:val},{attr:val, attr:val}] using method above\n        @convertToArray = (input) ->\n            result = []\n            PivotData.forEachRecord input, {}, (record) -> result.push record\n            return result\n\n        @convertValueToClassname = (ugly) ->\n            if Array.isArray(ugly)\n                str = \"#{ugly[ugly.length - 1]}\"\n            else\n                str = \"#{ugly}\"\n\n            return str && str.replace(/[^-_a-zA-Z0-9]+/g, '-').toLowerCase()\n\n        arrSort: (attrs) =>\n            sortersArr = (getSort(@sorters, a) for a in attrs)\n            (a,b) ->\n                for own i, sorter of sortersArr\n                    comparison = sorter(a[i], b[i])\n                    return comparison if comparison != 0\n                return 0\n\n        sortKeys: () =>\n            if not @sorted\n                @sorted = true\n                @rowKeys.sort @arrSort(@rowAttrs)\n                @colKeys.sort @arrSort(@colAttrs)\n\n        getColKeys: () =>\n            @sortKeys()\n            return @colKeys\n\n        getRowKeys: () =>\n            @sortKeys()\n            return @rowKeys\n\n        processRecord: (record) -> #this code is called in a tight loop\n            colKey = []\n            rowKey = []\n            colKey.push record[x] ? \"null\" for x in @colAttrs\n            rowKey.push record[x] ? \"null\" for x in @rowAttrs\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n\n            @allTotal.push record\n\n            if rowKey.length != 0\n                if not @rowTotals[flatRowKey]\n                    @rowKeys.push rowKey\n                    @rowTotals[flatRowKey] = @aggregator(this, rowKey, [])\n                @rowTotals[flatRowKey].push record\n\n            if colKey.length != 0\n                if not @colTotals[flatColKey]\n                    @colKeys.push colKey\n                    @colTotals[flatColKey] = @aggregator(this, [], colKey)\n                @colTotals[flatColKey].push record\n\n            if colKey.length != 0 and rowKey.length != 0\n                if not @tree[flatRowKey]\n                    @tree[flatRowKey] = {}\n                if not @tree[flatRowKey][flatColKey]\n                    @tree[flatRowKey][flatColKey] = @aggregator(this, rowKey, colKey)\n                @tree[flatRowKey][flatColKey].push record\n\n        getAggregator: (rowKey, colKey) =>\n            flatRowKey = rowKey.join(String.fromCharCode(0))\n            flatColKey = colKey.join(String.fromCharCode(0))\n            if rowKey.length == 0 and colKey.length == 0\n                agg = @allTotal\n            else if rowKey.length == 0\n                agg = @colTotals[flatColKey]\n            else if colKey.length == 0\n                agg = @rowTotals[flatRowKey]\n            else\n                agg = @tree[flatRowKey][flatColKey]\n            return agg ? {value: (-> null), format: -> \"\"}\n\n    #expose these to the outside world\n    $.pivotUtilities = {aggregatorTemplates, aggregators, renderers, derivers, locales,\n        naturalSort, numberFormat, sortAs, exportTableToCSV, PivotData}\n\n    ###\n    Default Renderer for hierarchical table layout\n    ###\n\n    pivotTableRenderer = (pivotData, opts) ->\n\n        defaults =\n            localeStrings:\n                totals: \"Totals\"\n\n        opts = $.extend defaults, opts\n\n        colAttrs = pivotData.colAttrs\n        rowAttrs = pivotData.rowAttrs\n        rowKeys = pivotData.getRowKeys()\n        colKeys = pivotData.getColKeys()\n\n        #now actually build the output\n        result = document.createElement(\"table\")\n        result.className = \"pvtTable\"\n\n        #helper function for setting row/col-span in pivotTableRenderer\n        spanSize = (arr, i, j) ->\n            if i != 0\n                noDraw = true\n                for x in [0..j]\n                    if arr[i-1][x] != arr[i][x]\n                        noDraw = false\n                if noDraw\n                  return -1 #do not draw cell\n            len = 0\n            while i+len < arr.length\n                stop = false\n                for x in [0..j]\n                    stop = true if arr[i][x] != arr[i+len][x]\n                break if stop\n                len++\n            return len\n\n        #the first few rows are for col headers\n        for own j, c of colAttrs\n            tr = document.createElement(\"tr\")\n            if parseInt(j) == 0 and rowAttrs.length != 0\n                th = document.createElement(\"th\")\n                th.setAttribute(\"colspan\", rowAttrs.length)\n                th.setAttribute(\"rowspan\", colAttrs.length)\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            th.className = \"pvtAxisLabel\"\n            th.textContent = c\n            tr.appendChild th\n            for own i, colKey of colKeys\n                x = spanSize(colKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtColLabel\"\n                    th.textContent = colKey[j]\n                    if !colKey[j]\n                        th.textContent = \"(empty)\"\n                        th.className += \" pvtEmptyLabel\"\n                    th.setAttribute(\"colspan\", x)\n                    if parseInt(j) == colAttrs.length-1 and rowAttrs.length != 0\n                        th.setAttribute(\"rowspan\", 2)\n                    tr.appendChild th\n            if parseInt(j) == 0\n                th = document.createElement(\"th\")\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n                th.setAttribute(\"rowspan\", colAttrs.length + (if rowAttrs.length ==0 then 0 else 1))\n                tr.appendChild th\n            result.appendChild tr\n\n        #then a row for row header headers\n        if rowAttrs.length !=0\n            tr = document.createElement(\"tr\")\n            for own i, r of rowAttrs\n                th = document.createElement(\"th\")\n                th.className = \"pvtAxisLabel\"\n                th.textContent = r\n                tr.appendChild th\n            th = document.createElement(\"th\")\n            if colAttrs.length ==0\n                th.className = \"pvtTotalLabel\"\n                th.innerHTML = opts.localeStrings.totals\n            tr.appendChild th\n            result.appendChild tr\n\n        #now the actual data rows, with their row headers and totals\n        for own i, rowKey of rowKeys\n            tr = document.createElement(\"tr\")\n            for own j, txt of rowKey\n                x = spanSize(rowKeys, parseInt(i), parseInt(j))\n                if x != -1\n                    th = document.createElement(\"th\")\n                    th.className = \"pvtRowLabel\"\n                    th.textContent = txt\n                    if !txt\n                        th.textContent = \"(empty)\"\n                        th.className += \" pvtEmptyLabel\"\n                    th.setAttribute(\"rowspan\", x)\n                    if parseInt(j) == rowAttrs.length-1 and colAttrs.length !=0\n                        th.setAttribute(\"colspan\",2)\n                    tr.appendChild th\n            for own j, colKey of colKeys #this is the tight loop\n                aggregator = pivotData.getAggregator(rowKey, colKey)\n                val = aggregator.value()\n                td = document.createElement(\"td\")\n\n                cellHeader = PivotData.convertValueToClassname(colKey)\n                if val and val[0] and typeof aggregator.formatHtml is 'function'\n                  htmlEl = aggregator.formatHtml(val, rowKey, colKey, aggregator.type)\n                  td.setAttribute(\"data-value\", val[0])\n                  td.appendChild htmlEl\n                else if val and val[0]\n                  cellValue = PivotData.convertValueToClassname(val[0])\n                  td.setAttribute(\"data-value\", val[0])\n                  td.textContent = aggregator.format(val[0])\n                else\n                  td.setAttribute(\"data-value\", val)\n                  td.textContent = aggregator.format(val)\n                  cellValue = PivotData.convertValueToClassname(val)\n                td.className = \"pvtVal row#{i} col#{j} cell-#{cellHeader}-#{cellValue}\"\n                tr.appendChild td\n\n            totalAggregator = pivotData.getAggregator(rowKey, [])\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal rowTotal\"\n\n            if val and val[0] and typeof aggregator.formatHtml is 'function'\n              td.setAttribute(\"data-value\", val[0])\n              htmlEl = totalAggregator.formatHtml(val)\n              td.appendChild htmlEl\n            else if val and val[0]\n              td.setAttribute(\"data-value\", val[0])\n              td.textContent = totalAggregator.format(val[0])\n            else\n              td.textContent = totalAggregator.format(val)\n              td.setAttribute(\"data-value\", val)\n\n            td.setAttribute(\"data-for\", \"row\"+i)\n            tr.appendChild td\n            result.appendChild tr\n\n        #finally, the row for col totals, and a grand total\n        tr = document.createElement(\"tr\")\n        th = document.createElement(\"th\")\n        th.className = \"pvtTotalLabel\"\n        th.innerHTML = opts.localeStrings.totals\n        th.setAttribute(\"colspan\", rowAttrs.length + (if colAttrs.length == 0 then 0 else 1))\n        tr.appendChild th\n        for own j, colKey of colKeys\n            totalAggregator = pivotData.getAggregator([], colKey)\n            val = totalAggregator.value()\n            td = document.createElement(\"td\")\n            td.className = \"pvtTotal colTotal\"\n\n            if val and val[0] and typeof aggregator.formatHtml is 'function'\n              td.setAttribute(\"data-value\", val[0])\n              htmlEl = totalAggregator.formatHtml(val)\n              td.appendChild htmlEl\n            else if val and val[0]\n              td.setAttribute(\"data-value\", val[0])\n              td.textContent = totalAggregator.format(val[0])\n            else\n              td.textContent = totalAggregator.format(val)\n              td.setAttribute(\"data-value\", val)\n\n            td.setAttribute(\"data-for\", \"col\"+j)\n            tr.appendChild td\n        totalAggregator = pivotData.getAggregator([], [])\n        val = totalAggregator.value()\n        td = document.createElement(\"td\")\n        td.className = \"pvtGrandTotal\"\n\n        if val and val[0] and typeof aggregator.formatHtml is 'function'\n          td.setAttribute(\"data-value\", val[0])\n          htmlEl = totalAggregator.formatHtml(val)\n          td.appendChild htmlEl\n        else if val and val[0]\n          td.setAttribute(\"data-value\", val[0])\n          td.textContent = totalAggregator.format(val[0])\n        else\n          td.textContent = totalAggregator.format(val)\n          td.setAttribute(\"data-value\", val)\n\n        tr.appendChild td\n        result.appendChild tr\n\n        #squirrel this away for later\n        result.setAttribute(\"data-numrows\", rowKeys.length)\n        result.setAttribute(\"data-numcols\", colKeys.length)\n\n        return result\n\n    ###\n    Pivot Table core: create PivotData object and call Renderer on it\n    ###\n\n    $.fn.pivot = (input, opts) ->\n        defaults =\n            cols : []\n            rows: []\n            vals: []\n            filter: -> true\n            aggregator: aggregatorTemplates.count()()\n            aggregatorName: \"Count\"\n            sorters: ->\n            derivedAttributes: {},\n            renderer: pivotTableRenderer\n            rendererOptions: null\n            localeStrings: locales.en.localeStrings\n\n        opts = $.extend defaults, opts\n\n        result = null\n        try\n            pivotData = new PivotData(input, opts)\n            try\n                result = opts.renderer(pivotData, opts.rendererOptions)\n            catch e\n                console.error(e.stack) if console?\n                result = $(\"<span>\").html opts.localeStrings.renderError\n        catch e\n            console.error(e.stack) if console?\n            result = $(\"<span>\").html opts.localeStrings.computeError\n\n        x = this[0]\n        x.removeChild(x.lastChild) while x.hasChildNodes()\n        return @append result\n\n\n    ###\n    Pivot Table UI: calls Pivot Table core above with options set by user\n    ###\n\n    $.fn.pivotUI = (input, inputOpts, overwrite = false, locale=\"en\") ->\n        if not locales[locale]?\n            locale = \"en\"\n        defaults =\n            derivedAttributes: {}\n            aggregators: locales[locale].aggregators\n            renderers: locales[locale].renderers\n            hiddenAttributes: []\n            menuLimit: 200\n            cols: [], rows: [], vals: []\n            exclusions: {}\n            inclusions: {}\n            unusedAttrsVertical: 85\n            autoSortUnusedAttrs: false\n            rendererOptions: localeStrings: locales[locale].localeStrings\n            onRefresh: null\n            filter: -> true\n            sorters: ->\n            localeStrings: locales[locale].localeStrings\n\n        existingOpts = @data \"pivotUIOptions\"\n        if not existingOpts? or overwrite\n            opts = $.extend defaults, inputOpts\n        else\n            opts = existingOpts\n\n        try\n            #cache the input in some useful form\n            input = PivotData.convertToArray(input)\n            tblCols = (k for own k of input[0])\n            tblCols.push c for own c of opts.derivedAttributes when (c not in tblCols)\n\n            #figure out the cardinality and some stats\n            axisValues = {}\n            axisValues[x] = {} for x in tblCols\n\n            PivotData.forEachRecord input, opts.derivedAttributes, (record) ->\n                for own k, v of record when opts.filter(record)\n                    v ?= \"null\"\n                    axisValues[k][v] ?= 0\n                    axisValues[k][v]++\n\n            #start building the output\n            uiTable = $(\"<table>\", \"class\": \"pvtUi\").attr(\"cellpadding\", 5)\n\n            #renderer control\n            rendererControl = $(\"<td>\")\n\n            renderer = $(\"<select>\")\n                .addClass('pvtRenderer')\n                .appendTo(rendererControl)\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.renderers\n                $(\"<option>\").val(x).html(x).appendTo(renderer)\n\n\n            #axis list, including the double-click menu\n            colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused')\n            shownAttributes = (c for c in tblCols when c not in opts.hiddenAttributes)\n\n            unusedAttrsVerticalAutoOverride = false\n            if opts.unusedAttrsVertical == \"auto\"\n                unusedAttrsVerticalAutoCutoff = 120 # legacy support\n            else\n                unusedAttrsVerticalAutoCutoff = parseInt opts.unusedAttrsVertical\n\n            if not isNaN(unusedAttrsVerticalAutoCutoff)\n                attrLength = 0\n                attrLength += a.length for a in shownAttributes\n                unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff\n\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                colList.addClass('pvtVertList')\n            else\n                colList.addClass('pvtHorizList')\n\n            for own i, c of shownAttributes\n                do (c) ->\n                    keys = (k for k of axisValues[c])\n                    hasExcludedItem = false\n                    valueList = $(\"<div>\").addClass('pvtFilterBox').hide()\n\n                    valueList.append $(\"<h4>\").text(\"#{c} (#{keys.length})\")\n                    if keys.length > opts.menuLimit\n                        valueList.append $(\"<p>\").html(opts.localeStrings.tooMany)\n                    else\n                        btns = $(\"<p>\").appendTo(valueList)\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectAll).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", true\n                        btns.append $(\"<button>\", {type:\"button\"}).html(opts.localeStrings.selectNone).bind \"click\", ->\n                            valueList.find(\"input:visible\").prop \"checked\", false\n                        btns.append $(\"<br>\")\n                        btns.append $(\"<input>\", {type: \"text\", placeholder: opts.localeStrings.filterResults, class: \"pvtSearch\"}).bind \"keyup\", ->\n                            filter = $(this).val().toLowerCase()\n                            valueList.find('.pvtCheckContainer p').each ->\n                                testString = $(this).text().toLowerCase().indexOf(filter)\n                                if testString isnt -1\n                                    $(this).show()\n                                else\n                                    $(this).hide()\n\n                        checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList)\n\n                        for k in keys.sort(getSort(opts.sorters, c))\n                             v = axisValues[c][k]\n                             filterItem = $(\"<label>\")\n                             filterItemExcluded = false\n                             if opts.inclusions[c]\n                                filterItemExcluded = (k not in opts.inclusions[c])\n                             else if opts.exclusions[c]\n                                filterItemExcluded = (k in opts.exclusions[c])\n                             hasExcludedItem ||= filterItemExcluded\n                             $(\"<input>\")\n                                .attr(\"type\", \"checkbox\").addClass('pvtFilter')\n                                .attr(\"checked\", !filterItemExcluded).data(\"filter\", [c,k])\n                                .appendTo filterItem\n                             filterItem.append $(\"<span>\").text k\n                             filterItem.append $(\"<span>\").text \" (\"+v+\")\"\n                             checkContainer.append $(\"<p>\").append(filterItem)\n\n                    updateFilter = ->\n                        unselectedCount = valueList.find(\"[type='checkbox']\").length -\n                                          valueList.find(\"[type='checkbox']:checked\").length\n                        if unselectedCount > 0\n                            attrElem.addClass \"pvtFilteredAttribute\"\n                        else\n                            attrElem.removeClass \"pvtFilteredAttribute\"\n                        if keys.length > opts.menuLimit\n                            valueList.toggle()\n                        else\n                            valueList.toggle(0, refresh)\n\n                    $(\"<p>\").appendTo(valueList)\n                        .append $(\"<button>\", {type:\"button\"}).text(\"OK\").bind \"click\", updateFilter\n\n                    showFilterList = (e) ->\n                        {left: clickLeft, top: clickTop, } = $(e.currentTarget).position()\n                        valueList.css(left: clickLeft+10, top: clickTop+10).toggle()\n                        valueList.find('.pvtSearch').val('')\n                        valueList.find('.pvtCheckContainer p').show()\n\n                    triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\")\n                        .bind \"click\", showFilterList\n\n                    attrElem = $(\"<li>\").addClass(\"axis_#{i}\")\n                        .append $(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink)\n                    attrElem.addClass('pvtFilteredAttribute') if hasExcludedItem\n                    colList.append(attrElem).append(valueList)\n\n                    attrElem.bind \"dblclick\", showFilterList\n\n            tr1 = $(\"<tr>\").appendTo(uiTable)\n\n            #aggregator menu and value area\n\n            aggregator = $(\"<select>\").addClass('pvtAggregator')\n                .bind \"change\", -> refresh() #capture reference\n            for own x of opts.aggregators\n                aggregator.append $(\"<option>\").val(x).html(x)\n\n            $(\"<td>\").addClass('pvtVals')\n              .appendTo(tr1)\n              .append(aggregator)\n              .append($(\"<br>\"))\n\n            #column axes\n            $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1)\n\n            tr2 = $(\"<tr>\").appendTo(uiTable)\n\n            #row axes\n            tr2.append $(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\")\n\n            #the actual pivot table container\n            pivotTable = $(\"<td>\")\n                .attr(\"valign\", \"top\")\n                .addClass('pvtRendererArea')\n                .appendTo(tr2)\n\n            #finally the renderer dropdown and unused attribs are inserted at the requested location\n            if opts.unusedAttrsVertical == true or unusedAttrsVerticalAutoOverride\n                uiTable.find('tr:nth-child(1)').prepend rendererControl\n                uiTable.find('tr:nth-child(2)').prepend colList\n            else\n                uiTable.prepend $(\"<tr>\").append(rendererControl).append(colList)\n\n            #render the UI in its default state\n            @html uiTable\n\n            #set up the UI initial state as requested by moving elements around\n\n            for x in opts.cols\n                @find(\".pvtCols\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            for x in opts.rows\n                @find(\".pvtRows\").append @find(\".axis_#{$.inArray(x, shownAttributes)}\")\n            if opts.aggregatorName?\n                @find(\".pvtAggregator\").val opts.aggregatorName\n            if opts.rendererName?\n                @find(\".pvtRenderer\").val opts.rendererName\n\n            initialRender = true\n\n            #set up for refreshing\n            refreshDelayed = =>\n                subopts =\n                    derivedAttributes: opts.derivedAttributes\n                    localeStrings: opts.localeStrings\n                    rendererOptions: opts.rendererOptions\n                    sorters: opts.sorters\n                    cols: [], rows: []\n\n                numInputsToProcess = opts.aggregators[aggregator.val()]([])().numInputs ? 0\n                vals = []\n                @find(\".pvtRows li span.pvtAttr\").each -> subopts.rows.push $(this).data(\"attrName\")\n                @find(\".pvtCols li span.pvtAttr\").each -> subopts.cols.push $(this).data(\"attrName\")\n                @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                    if numInputsToProcess == 0\n                        $(this).remove()\n                    else\n                        numInputsToProcess--\n                        vals.push $(this).val() if $(this).val() != \"\"\n\n                if numInputsToProcess != 0\n                    pvtVals = @find(\".pvtVals\")\n                    for x in [0...numInputsToProcess]\n                        newDropdown = $(\"<select>\")\n                            .addClass('pvtAttrDropdown')\n                            .append($(\"<option>\"))\n                            .bind \"change\", -> refresh()\n                        for attr in shownAttributes\n                            newDropdown.append($(\"<option>\").val(attr).text(attr))\n                        pvtVals.append(newDropdown)\n\n                if initialRender\n                    vals = opts.vals\n                    i = 0\n                    @find(\".pvtVals select.pvtAttrDropdown\").each ->\n                        $(this).val vals[i]\n                        i++\n                    initialRender = false\n\n                subopts.aggregatorName = aggregator.val()\n                subopts.vals = vals\n                subopts.aggregator = opts.aggregators[aggregator.val()](vals)\n                subopts.renderer = opts.renderers[renderer.val()]\n\n                #construct filter here\n                exclusions = {}\n                @find('input.pvtFilter').not(':checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        exclusions[filter[0]].push( filter[1] )\n                    else\n                        exclusions[filter[0]] = [ filter[1] ]\n                #include inclusions when exclusions present\n                inclusions = {}\n                @find('input.pvtFilter:checked').each ->\n                    filter = $(this).data(\"filter\")\n                    if exclusions[filter[0]]?\n                        if inclusions[filter[0]]?\n                            inclusions[filter[0]].push( filter[1] )\n                        else\n                            inclusions[filter[0]] = [ filter[1] ]\n\n                subopts.filter = (record) ->\n                    return false if not opts.filter(record)\n                    for k,excludedItems of exclusions\n                        return false if \"\"+record[k] in excludedItems\n                    return true\n\n                pivotTable.pivot(input,subopts)\n                pivotUIOptions = $.extend opts,\n                    cols: subopts.cols\n                    rows: subopts.rows\n                    vals: vals\n                    exclusions: exclusions\n                    inclusions: inclusions\n                    inclusionsInfo: inclusions #duplicated for backwards-compatibility\n                    aggregatorName: aggregator.val()\n                    rendererName: renderer.val()\n\n                @data \"pivotUIOptions\", pivotUIOptions\n\n                # if requested make sure unused columns are in alphabetical order\n                if opts.autoSortUnusedAttrs\n                    unusedAttrsContainer = @find(\"td.pvtUnused.pvtAxisContainer\")\n                    $(unusedAttrsContainer).children(\"li\")\n                        .sort((a, b) => naturalSort($(a).text(), $(b).text()))\n                        .appendTo unusedAttrsContainer\n\n                pivotTable.css(\"opacity\", 1)\n                opts.onRefresh(pivotUIOptions) if opts.onRefresh?\n\n            refresh = =>\n                pivotTable.css(\"opacity\", 0.5)\n                setTimeout refreshDelayed, 10\n\n            #the very first refresh will actually display the table\n            refresh()\n\n            @find(\".pvtAxisContainer\").sortable\n                    update: (e, ui) -> refresh() if not ui.sender?\n                    connectWith: @find(\".pvtAxisContainer\")\n                    items: 'li'\n                    placeholder: 'pvtPlaceholder'\n        catch e\n            console.error(e.stack) if console?\n            @html opts.localeStrings.uiRenderError\n        return this\n\n    ###\n    Heatmap post-processing\n    ###\n\n    $.fn.heatmap = (scope = \"heatmap\") ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        colorGen = (color, min, max) ->\n            hexGen = switch color\n                when \"red\"   then (hex) -> \"ff#{hex}#{hex}\"\n                when \"green\" then (hex) -> \"#{hex}ff#{hex}\"\n                when \"blue\"  then (hex) -> \"#{hex}#{hex}ff\"\n\n            return (x) ->\n                intensity = 255 - Math.round 255*(x-min)/(max-min)\n                hex = intensity.toString(16).split(\".\")[0]\n                hex = 0+hex if hex.length == 1\n                return hexGen(hex)\n\n        heatmapper = (scope, color) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            colorFor = colorGen color, Math.min(values...), Math.max(values...)\n            forEachCell (x, elem) -> elem.css \"background-color\", \"#\" + colorFor(x)\n\n        switch scope\n            when \"heatmap\"\n                heatmapper \".pvtVal\", \"red\"\n            when \"rowheatmap\"\n                heatmapper \".pvtVal.row#{i}\", \"red\" for i in [0...numRows]\n            when \"colheatmap\"\n                heatmapper \".pvtVal.col#{j}\", \"red\" for j in [0...numCols]\n\n        heatmapper \".pvtTotal.rowTotal\", \"red\"\n        heatmapper \".pvtTotal.colTotal\", \"red\"\n\n        return this\n\n    ###\n    Barchart post-processing\n    ###\n\n    $.fn.barchart =  ->\n        numRows = @data \"numrows\"\n        numCols = @data \"numcols\"\n\n        barcharter = (scope) =>\n            forEachCell = (f) =>\n                @find(scope).each ->\n                    x = $(this).data(\"value\")\n                    f(x, $(this)) if x? and isFinite(x)\n\n            values = []\n            forEachCell (x) -> values.push x\n            max = Math.max(values...)\n            scaler = (x) -> 100*x/(1.4*max)\n            forEachCell (x, elem) ->\n                text = elem.text()\n                wrapper = $(\"<div>\").css\n                    \"position\": \"relative\"\n                    \"height\": \"55px\"\n                wrapper.append $(\"<div>\").css\n                    \"position\": \"absolute\"\n                    \"bottom\": 0\n                    \"left\": 0\n                    \"right\": 0\n                    \"height\": scaler(x) + \"%\"\n                    \"background-color\": \"gray\"\n                wrapper.append $(\"<div>\").text(text).css\n                    \"position\":\"relative\"\n                    \"padding-left\":\"5px\"\n                    \"padding-right\":\"5px\"\n\n                elem.css(\"padding\": 0,\"padding-top\": \"5px\", \"text-align\": \"center\").html wrapper\n\n        barcharter \".pvtVal.row#{i}\" for i in [0...numRows]\n        barcharter \".pvtTotal.colTotal\"\n\n        return this\n\n\n","(function() {\n  var callWithJQuery,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },\n    slice = [].slice,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    hasProp = {}.hasOwnProperty;\n\n  callWithJQuery = function(pivotModule) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n      return pivotModule(require(\"jquery\"));\n    } else if (typeof define === \"function\" && define.amd) {\n      return define([\"jquery\"], pivotModule);\n    } else {\n      return pivotModule(jQuery);\n    }\n  };\n\n  callWithJQuery(function($) {\n\n    /*\n    Utilities\n     */\n    var PivotData, addSeparators, aggregatorTemplates, aggregators, dayNamesEn, derivers, exportTableToCSV, getSort, locales, mthNamesEn, naturalSort, normalizeTable, numberFormat, pivotTableRenderer, renderers, sortAs, usFmt, usFmtInt, usFmtPct, zeroPad;\n    addSeparators = function(nStr, thousandsSep, decimalSep) {\n      var rgx, x, x1, x2;\n      nStr += '';\n      x = nStr.split('.');\n      x1 = x[0];\n      x2 = x.length > 1 ? decimalSep + x[1] : '';\n      rgx = /(\\d+)(\\d{3})/;\n      while (rgx.test(x1)) {\n        x1 = x1.replace(rgx, '$1' + thousandsSep + '$2');\n      }\n      return x1 + x2;\n    };\n    numberFormat = function(opts) {\n      var defaults;\n      defaults = {\n        digitsAfterDecimal: 2,\n        scaler: 1,\n        thousandsSep: \",\",\n        decimalSep: \".\",\n        prefix: \"\",\n        suffix: \"\",\n        showZero: false\n      };\n      opts = $.extend(defaults, opts);\n      return function(x) {\n        var result;\n        if (isNaN(x) || !isFinite(x)) {\n          return \"\";\n        }\n        if (x === 0 && !opts.showZero) {\n          return \"\";\n        }\n        result = addSeparators((opts.scaler * x).toFixed(opts.digitsAfterDecimal), opts.thousandsSep, opts.decimalSep);\n        return \"\" + opts.prefix + result + opts.suffix;\n      };\n    };\n    usFmt = numberFormat();\n    usFmtInt = numberFormat({\n      digitsAfterDecimal: 0\n    });\n    usFmtPct = numberFormat({\n      digitsAfterDecimal: 1,\n      scaler: 100,\n      suffix: \"%\"\n    });\n    aggregatorTemplates = {\n      count: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function() {\n          return function(data, rowKey, colKey) {\n            return {\n              count: 0,\n              push: function() {\n                return this.count++;\n              },\n              value: function() {\n                return [this.count];\n              },\n              format: formatter\n            };\n          };\n        };\n      },\n      countUnique: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmtInt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return [this.uniq.length];\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      listUnique: function(sep) {\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              uniq: [],\n              push: function(record) {\n                var ref;\n                if (ref = record[attr], indexOf.call(this.uniq, ref) < 0) {\n                  return this.uniq.push(record[attr]);\n                }\n              },\n              value: function() {\n                return [this.uniq.join(sep)];\n              },\n              format: function(x) {\n                return x;\n              },\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  return this.sum += parseFloat(record[attr]);\n                }\n              },\n              value: function() {\n                return [this.sum];\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      min: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.min(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return [this.val];\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      max: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              val: null,\n              push: function(record) {\n                var ref, x;\n                x = parseFloat(record[attr]);\n                if (!isNaN(x)) {\n                  return this.val = Math.max(x, (ref = this.val) != null ? ref : x);\n                }\n              },\n              value: function() {\n                return [this.val];\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      average: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var attr;\n          attr = arg[0];\n          return function(data, rowKey, colKey) {\n            return {\n              sum: 0,\n              len: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[attr]))) {\n                  this.sum += parseFloat(record[attr]);\n                  return this.len++;\n                }\n              },\n              value: function() {\n                return [this.sum / this.len];\n              },\n              format: formatter,\n              numInputs: attr != null ? 0 : 1\n            };\n          };\n        };\n      },\n      sumOverSum: function(formatter) {\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                return [this.sumNum / this.sumDenom];\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      sumOverSumBound80: function(upper, formatter) {\n        if (upper == null) {\n          upper = true;\n        }\n        if (formatter == null) {\n          formatter = usFmt;\n        }\n        return function(arg) {\n          var denom, num;\n          num = arg[0], denom = arg[1];\n          return function(data, rowKey, colKey) {\n            return {\n              sumNum: 0,\n              sumDenom: 0,\n              push: function(record) {\n                if (!isNaN(parseFloat(record[num]))) {\n                  this.sumNum += parseFloat(record[num]);\n                }\n                if (!isNaN(parseFloat(record[denom]))) {\n                  return this.sumDenom += parseFloat(record[denom]);\n                }\n              },\n              value: function() {\n                var res, sign;\n                sign = upper ? 1 : -1;\n                res = (0.821187207574908 / this.sumDenom + this.sumNum / this.sumDenom + 1.2815515655446004 * sign * Math.sqrt(0.410593603787454 / (this.sumDenom * this.sumDenom) + (this.sumNum * (1 - this.sumNum / this.sumDenom)) / (this.sumDenom * this.sumDenom))) / (1 + 1.642374415149816 / this.sumDenom);\n                return [res];\n              },\n              format: formatter,\n              numInputs: (num != null) && (denom != null) ? 0 : 2\n            };\n          };\n        };\n      },\n      fractionOf: function(wrapped, type, formatter) {\n        if (type == null) {\n          type = \"total\";\n        }\n        if (formatter == null) {\n          formatter = usFmtPct;\n        }\n        return function() {\n          var x;\n          x = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return function(data, rowKey, colKey) {\n            return {\n              selector: {\n                total: [[], []],\n                row: [rowKey, []],\n                col: [[], colKey]\n              }[type],\n              inner: wrapped.apply(null, x)(data, rowKey, colKey),\n              push: function(record) {\n                return this.inner.push(record);\n              },\n              format: formatter,\n              value: function() {\n                return [this.inner.value() / data.getAggregator.apply(data, this.selector).inner.value()];\n              },\n              numInputs: wrapped.apply(null, x)().numInputs\n            };\n          };\n        };\n      }\n    };\n    aggregators = (function(tpl) {\n      return {\n        \"Count\": tpl.count(usFmtInt),\n        \"Count Unique Values\": tpl.countUnique(usFmtInt),\n        \"List Unique Values\": tpl.listUnique(\", \"),\n        \"Sum\": tpl.sum(usFmt),\n        \"Integer Sum\": tpl.sum(usFmtInt),\n        \"Average\": tpl.average(usFmt),\n        \"Minimum\": tpl.min(usFmt),\n        \"Maximum\": tpl.max(usFmt),\n        \"Sum over Sum\": tpl.sumOverSum(usFmt),\n        \"80% Upper Bound\": tpl.sumOverSumBound80(true, usFmt),\n        \"80% Lower Bound\": tpl.sumOverSumBound80(false, usFmt),\n        \"Sum as Fraction of Total\": tpl.fractionOf(tpl.sum(), \"total\", usFmtPct),\n        \"Sum as Fraction of Rows\": tpl.fractionOf(tpl.sum(), \"row\", usFmtPct),\n        \"Sum as Fraction of Columns\": tpl.fractionOf(tpl.sum(), \"col\", usFmtPct),\n        \"Count as Fraction of Total\": tpl.fractionOf(tpl.count(), \"total\", usFmtPct),\n        \"Count as Fraction of Rows\": tpl.fractionOf(tpl.count(), \"row\", usFmtPct),\n        \"Count as Fraction of Columns\": tpl.fractionOf(tpl.count(), \"col\", usFmtPct)\n      };\n    })(aggregatorTemplates);\n    renderers = {\n      \"Table\": function(pvtData, opts) {\n        return pivotTableRenderer(pvtData, opts);\n      },\n      \"Table Barchart\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).barchart();\n      },\n      \"Heatmap\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).heatmap();\n      },\n      \"Row Heatmap\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).heatmap(\"rowheatmap\");\n      },\n      \"Col Heatmap\": function(pvtData, opts) {\n        return $(pivotTableRenderer(pvtData, opts)).heatmap(\"colheatmap\");\n      }\n    };\n    locales = {\n      en: {\n        aggregators: aggregators,\n        renderers: renderers,\n        localeStrings: {\n          renderError: \"An error occurred rendering the PivotTable results.\",\n          computeError: \"An error occurred computing the PivotTable results.\",\n          uiRenderError: \"An error occurred rendering the PivotTable UI.\",\n          selectAll: \"Select All\",\n          selectNone: \"Select None\",\n          tooMany: \"(too many to list)\",\n          filterResults: \"Filter results\",\n          totals: \"Totals\",\n          vs: \"vs\",\n          by: \"by\"\n        }\n      }\n    };\n    mthNamesEn = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    dayNamesEn = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    zeroPad = function(number) {\n      return (\"0\" + number).substr(-2, 2);\n    };\n    derivers = {\n      bin: function(col, binWidth) {\n        return function(record) {\n          return record[col] - record[col] % binWidth;\n        };\n      },\n      dateFormat: function(col, formatString, utcOutput, mthNames, dayNames) {\n        var utc;\n        if (utcOutput == null) {\n          utcOutput = false;\n        }\n        if (mthNames == null) {\n          mthNames = mthNamesEn;\n        }\n        if (dayNames == null) {\n          dayNames = dayNamesEn;\n        }\n        utc = utcOutput ? \"UTC\" : \"\";\n        return function(record) {\n          var date;\n          date = new Date(Date.parse(record[col]));\n          if (isNaN(date)) {\n            return \"\";\n          }\n          return formatString.replace(/%(.)/g, function(m, p) {\n            switch (p) {\n              case \"y\":\n                return date[\"get\" + utc + \"FullYear\"]();\n              case \"m\":\n                return zeroPad(date[\"get\" + utc + \"Month\"]() + 1);\n              case \"n\":\n                return mthNames[date[\"get\" + utc + \"Month\"]()];\n              case \"d\":\n                return zeroPad(date[\"get\" + utc + \"Date\"]());\n              case \"w\":\n                return dayNames[date[\"get\" + utc + \"Day\"]()];\n              case \"x\":\n                return date[\"get\" + utc + \"Day\"]();\n              case \"H\":\n                return zeroPad(date[\"get\" + utc + \"Hours\"]());\n              case \"M\":\n                return zeroPad(date[\"get\" + utc + \"Minutes\"]());\n              case \"S\":\n                return zeroPad(date[\"get\" + utc + \"Seconds\"]());\n              default:\n                return \"%\" + p;\n            }\n          });\n        };\n      }\n    };\n    naturalSort = (function(_this) {\n      return function(as, bs) {\n        var a, a1, b, b1, rd, rx, rz;\n        rx = /(\\d+)|(\\D+)/g;\n        rd = /\\d/;\n        rz = /^0/;\n        if (typeof as === \"number\" || typeof bs === \"number\") {\n          if (isNaN(as)) {\n            return 1;\n          }\n          if (isNaN(bs)) {\n            return -1;\n          }\n          return as - bs;\n        }\n        a = String(as).toLowerCase();\n        b = String(bs).toLowerCase();\n        if (a === b) {\n          return 0;\n        }\n        if (!(rd.test(a) && rd.test(b))) {\n          return (a > b ? 1 : -1);\n        }\n        a = a.match(rx);\n        b = b.match(rx);\n        while (a.length && b.length) {\n          a1 = a.shift();\n          b1 = b.shift();\n          if (a1 !== b1) {\n            if (rd.test(a1) && rd.test(b1)) {\n              return a1.replace(rz, \".0\") - b1.replace(rz, \".0\");\n            } else {\n              return (a1 > b1 ? 1 : -1);\n            }\n          }\n        }\n        return a.length - b.length;\n      };\n    })(this);\n    sortAs = function(order) {\n      var i, mapping, x;\n      mapping = {};\n      for (i in order) {\n        x = order[i];\n        mapping[x] = i;\n      }\n      return function(a, b) {\n        if ((mapping[a] != null) && (mapping[b] != null)) {\n          return mapping[a] - mapping[b];\n        } else if (mapping[a] != null) {\n          return -1;\n        } else if (mapping[b] != null) {\n          return 1;\n        } else {\n          return naturalSort(a, b);\n        }\n      };\n    };\n    getSort = function(sorters, attr) {\n      var sort;\n      sort = sorters(attr);\n      if ($.isFunction(sort)) {\n        return sort;\n      } else {\n        return naturalSort;\n      }\n    };\n    normalizeTable = function($table) {\n      var headerPattern, headers, removeCount, separator;\n      $table.find('th[colspan], td[colspan]').each(function() {\n        var cell, count, results;\n        cell = $(this);\n        count = parseInt(cell.attr('colspan')) - 1;\n        cell.removeAttr('colspan');\n        results = [];\n        while (count > 0) {\n          cell.after(cell.clone());\n          cell = cell;\n          results.push(count--);\n        }\n        return results;\n      });\n      $table.find('th[rowspan], td[rowspan]').each(function() {\n        var cell, count, index, results, row;\n        cell = $(this);\n        row = cell.parent();\n        index = cell.get(0).cellIndex;\n        count = parseInt(cell.attr('rowspan')) - 1;\n        cell.removeAttr('rowspan');\n        results = [];\n        while (count > 0) {\n          row = row.next();\n          row.find(\"td:nth-child(\" + (index + 1) + \"), th:nth-child(\" + (index + 1) + \")\").before(cell.clone());\n          results.push(count--);\n        }\n        return results;\n      });\n      headers = [];\n      separator = \" - \";\n      removeCount = 0;\n      headerPattern = null;\n      return $table.find('tr').each(function(i) {\n        var cell, headerKey, text;\n        cell = $(this).find('td:nth-child(1), th:nth-child(1)');\n        text = cell.text().trim();\n        if (i === 0) {\n          headerKey = text;\n          headerPattern = new RegExp(\"^\" + headerKey + \"$\", 'i');\n          $(this).children().each(function() {\n            return headers.push([$(this).text().trim()]);\n          });\n        } else {\n          if (text.match(headerPattern)) {\n            $(this).children().each(function(i) {\n              var header;\n              header = headers[i];\n              text = $(this).text().trim();\n              if (header.indexOf(text) === -1) {\n                return header.push(text);\n              }\n            });\n            $(this).remove();\n          } else {\n            return false;\n          }\n        }\n        return $table.find('tr:first').children().each(function(i) {\n          return $(this).text(headers[i].join(separator));\n        });\n      });\n    };\n    exportTableToCSV = function(filename) {\n      var $rows, colDelim, csv, exportTable, rowDelim, tmpColDelim, tmpRowDelim;\n      exportTable = $(\".pvtTable\").clone();\n      normalizeTable(exportTable);\n      $rows = exportTable.find(\"tr:has(td),tr:has(th)\");\n      tmpColDelim = String.fromCharCode(11);\n      tmpRowDelim = String.fromCharCode(0);\n      colDelim = \"\\\",\\\"\";\n      rowDelim = \"\\\"\\r\\n\\\"\";\n      csv = \"\\\"\" + $rows.map(function(i, row) {\n        var $cols, $row;\n        $row = $(row);\n        $cols = $row.find(\"td,th\");\n        return $cols.map(function(j, col) {\n          var $col, text;\n          $col = $(col);\n          text = $col.text();\n          return text.replace(\"\\\"\", \"\\\"\\\"\");\n        }).get().join(tmpColDelim);\n      }).get().join(tmpRowDelim).split(tmpRowDelim).join(rowDelim).split(tmpColDelim).join(colDelim) + \"\\\"\";\n      return csv;\n    };\n\n    /*\n    Data Model class\n     */\n    PivotData = (function() {\n      function PivotData(input, opts) {\n        this.getAggregator = bind(this.getAggregator, this);\n        this.getRowKeys = bind(this.getRowKeys, this);\n        this.getColKeys = bind(this.getColKeys, this);\n        this.sortKeys = bind(this.sortKeys, this);\n        this.arrSort = bind(this.arrSort, this);\n        this.aggregator = opts.aggregator;\n        this.aggregatorName = opts.aggregatorName;\n        this.colAttrs = opts.cols;\n        this.rowAttrs = opts.rows;\n        this.valAttrs = opts.vals;\n        this.sorters = opts.sorters;\n        this.tree = {};\n        this.rowKeys = [];\n        this.colKeys = [];\n        this.rowTotals = {};\n        this.colTotals = {};\n        this.allTotal = this.aggregator(this, [], []);\n        this.sorted = false;\n        PivotData.forEachRecord(input, opts.derivedAttributes, (function(_this) {\n          return function(record) {\n            if (opts.filter(record)) {\n              return _this.processRecord(record);\n            }\n          };\n        })(this));\n      }\n\n      PivotData.forEachRecord = function(input, derivedAttributes, f) {\n        var addRecord, compactRecord, i, j, k, l, len1, record, ref, results, results1, tblCols;\n        if ($.isEmptyObject(derivedAttributes)) {\n          addRecord = f;\n        } else {\n          addRecord = function(record) {\n            var k, ref, v;\n            for (k in derivedAttributes) {\n              v = derivedAttributes[k];\n              record[k] = (ref = v(record)) != null ? ref : record[k];\n            }\n            return f(record);\n          };\n        }\n        if ($.isFunction(input)) {\n          return input(addRecord);\n        } else if ($.isArray(input)) {\n          if ($.isArray(input[0])) {\n            results = [];\n            for (i in input) {\n              if (!hasProp.call(input, i)) continue;\n              compactRecord = input[i];\n              if (!(i > 0)) {\n                continue;\n              }\n              record = {};\n              ref = input[0];\n              for (j in ref) {\n                if (!hasProp.call(ref, j)) continue;\n                k = ref[j];\n                record[k] = compactRecord[j];\n              }\n              results.push(addRecord(record));\n            }\n            return results;\n          } else {\n            results1 = [];\n            for (l = 0, len1 = input.length; l < len1; l++) {\n              record = input[l];\n              results1.push(addRecord(record));\n            }\n            return results1;\n          }\n        } else if (input instanceof jQuery) {\n          tblCols = [];\n          $(\"thead > tr > th\", input).each(function(i) {\n            return tblCols.push($(this).text());\n          });\n          return $(\"tbody > tr\", input).each(function(i) {\n            record = {};\n            $(\"td\", this).each(function(j) {\n              return record[tblCols[j]] = $(this).text();\n            });\n            return addRecord(record);\n          });\n        } else {\n          throw new Error(\"unknown input format\");\n        }\n      };\n\n      PivotData.convertToArray = function(input) {\n        var result;\n        result = [];\n        PivotData.forEachRecord(input, {}, function(record) {\n          return result.push(record);\n        });\n        return result;\n      };\n\n      PivotData.convertValueToClassname = function(ugly) {\n        var str;\n        if (Array.isArray(ugly)) {\n          str = \"\" + ugly[ugly.length - 1];\n        } else {\n          str = \"\" + ugly;\n        }\n        return str && str.replace(/[^-_a-zA-Z0-9]+/g, '-').toLowerCase();\n      };\n\n      PivotData.prototype.arrSort = function(attrs) {\n        var a, sortersArr;\n        sortersArr = (function() {\n          var l, len1, results;\n          results = [];\n          for (l = 0, len1 = attrs.length; l < len1; l++) {\n            a = attrs[l];\n            results.push(getSort(this.sorters, a));\n          }\n          return results;\n        }).call(this);\n        return function(a, b) {\n          var comparison, i, sorter;\n          for (i in sortersArr) {\n            if (!hasProp.call(sortersArr, i)) continue;\n            sorter = sortersArr[i];\n            comparison = sorter(a[i], b[i]);\n            if (comparison !== 0) {\n              return comparison;\n            }\n          }\n          return 0;\n        };\n      };\n\n      PivotData.prototype.sortKeys = function() {\n        if (!this.sorted) {\n          this.sorted = true;\n          this.rowKeys.sort(this.arrSort(this.rowAttrs));\n          return this.colKeys.sort(this.arrSort(this.colAttrs));\n        }\n      };\n\n      PivotData.prototype.getColKeys = function() {\n        this.sortKeys();\n        return this.colKeys;\n      };\n\n      PivotData.prototype.getRowKeys = function() {\n        this.sortKeys();\n        return this.rowKeys;\n      };\n\n      PivotData.prototype.processRecord = function(record) {\n        var colKey, flatColKey, flatRowKey, l, len1, len2, n, ref, ref1, ref2, ref3, rowKey, x;\n        colKey = [];\n        rowKey = [];\n        ref = this.colAttrs;\n        for (l = 0, len1 = ref.length; l < len1; l++) {\n          x = ref[l];\n          colKey.push((ref1 = record[x]) != null ? ref1 : \"null\");\n        }\n        ref2 = this.rowAttrs;\n        for (n = 0, len2 = ref2.length; n < len2; n++) {\n          x = ref2[n];\n          rowKey.push((ref3 = record[x]) != null ? ref3 : \"null\");\n        }\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        this.allTotal.push(record);\n        if (rowKey.length !== 0) {\n          if (!this.rowTotals[flatRowKey]) {\n            this.rowKeys.push(rowKey);\n            this.rowTotals[flatRowKey] = this.aggregator(this, rowKey, []);\n          }\n          this.rowTotals[flatRowKey].push(record);\n        }\n        if (colKey.length !== 0) {\n          if (!this.colTotals[flatColKey]) {\n            this.colKeys.push(colKey);\n            this.colTotals[flatColKey] = this.aggregator(this, [], colKey);\n          }\n          this.colTotals[flatColKey].push(record);\n        }\n        if (colKey.length !== 0 && rowKey.length !== 0) {\n          if (!this.tree[flatRowKey]) {\n            this.tree[flatRowKey] = {};\n          }\n          if (!this.tree[flatRowKey][flatColKey]) {\n            this.tree[flatRowKey][flatColKey] = this.aggregator(this, rowKey, colKey);\n          }\n          return this.tree[flatRowKey][flatColKey].push(record);\n        }\n      };\n\n      PivotData.prototype.getAggregator = function(rowKey, colKey) {\n        var agg, flatColKey, flatRowKey;\n        flatRowKey = rowKey.join(String.fromCharCode(0));\n        flatColKey = colKey.join(String.fromCharCode(0));\n        if (rowKey.length === 0 && colKey.length === 0) {\n          agg = this.allTotal;\n        } else if (rowKey.length === 0) {\n          agg = this.colTotals[flatColKey];\n        } else if (colKey.length === 0) {\n          agg = this.rowTotals[flatRowKey];\n        } else {\n          agg = this.tree[flatRowKey][flatColKey];\n        }\n        return agg != null ? agg : {\n          value: (function() {\n            return null;\n          }),\n          format: function() {\n            return \"\";\n          }\n        };\n      };\n\n      return PivotData;\n\n    })();\n    $.pivotUtilities = {\n      aggregatorTemplates: aggregatorTemplates,\n      aggregators: aggregators,\n      renderers: renderers,\n      derivers: derivers,\n      locales: locales,\n      naturalSort: naturalSort,\n      numberFormat: numberFormat,\n      sortAs: sortAs,\n      exportTableToCSV: exportTableToCSV,\n      PivotData: PivotData\n    };\n\n    /*\n    Default Renderer for hierarchical table layout\n     */\n    pivotTableRenderer = function(pivotData, opts) {\n      var aggregator, c, cellHeader, cellValue, colAttrs, colKey, colKeys, defaults, htmlEl, i, j, r, result, rowAttrs, rowKey, rowKeys, spanSize, td, th, totalAggregator, tr, txt, val, x;\n      defaults = {\n        localeStrings: {\n          totals: \"Totals\"\n        }\n      };\n      opts = $.extend(defaults, opts);\n      colAttrs = pivotData.colAttrs;\n      rowAttrs = pivotData.rowAttrs;\n      rowKeys = pivotData.getRowKeys();\n      colKeys = pivotData.getColKeys();\n      result = document.createElement(\"table\");\n      result.className = \"pvtTable\";\n      spanSize = function(arr, i, j) {\n        var l, len, n, noDraw, ref, ref1, stop, x;\n        if (i !== 0) {\n          noDraw = true;\n          for (x = l = 0, ref = j; 0 <= ref ? l <= ref : l >= ref; x = 0 <= ref ? ++l : --l) {\n            if (arr[i - 1][x] !== arr[i][x]) {\n              noDraw = false;\n            }\n          }\n          if (noDraw) {\n            return -1;\n          }\n        }\n        len = 0;\n        while (i + len < arr.length) {\n          stop = false;\n          for (x = n = 0, ref1 = j; 0 <= ref1 ? n <= ref1 : n >= ref1; x = 0 <= ref1 ? ++n : --n) {\n            if (arr[i][x] !== arr[i + len][x]) {\n              stop = true;\n            }\n          }\n          if (stop) {\n            break;\n          }\n          len++;\n        }\n        return len;\n      };\n      for (j in colAttrs) {\n        if (!hasProp.call(colAttrs, j)) continue;\n        c = colAttrs[j];\n        tr = document.createElement(\"tr\");\n        if (parseInt(j) === 0 && rowAttrs.length !== 0) {\n          th = document.createElement(\"th\");\n          th.setAttribute(\"colspan\", rowAttrs.length);\n          th.setAttribute(\"rowspan\", colAttrs.length);\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        th.className = \"pvtAxisLabel\";\n        th.textContent = c;\n        tr.appendChild(th);\n        for (i in colKeys) {\n          if (!hasProp.call(colKeys, i)) continue;\n          colKey = colKeys[i];\n          x = spanSize(colKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtColLabel\";\n            th.textContent = colKey[j];\n            if (!colKey[j]) {\n              th.textContent = \"(empty)\";\n              th.className += \" pvtEmptyLabel\";\n            }\n            th.setAttribute(\"colspan\", x);\n            if (parseInt(j) === colAttrs.length - 1 && rowAttrs.length !== 0) {\n              th.setAttribute(\"rowspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        if (parseInt(j) === 0) {\n          th = document.createElement(\"th\");\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n          th.setAttribute(\"rowspan\", colAttrs.length + (rowAttrs.length === 0 ? 0 : 1));\n          tr.appendChild(th);\n        }\n        result.appendChild(tr);\n      }\n      if (rowAttrs.length !== 0) {\n        tr = document.createElement(\"tr\");\n        for (i in rowAttrs) {\n          if (!hasProp.call(rowAttrs, i)) continue;\n          r = rowAttrs[i];\n          th = document.createElement(\"th\");\n          th.className = \"pvtAxisLabel\";\n          th.textContent = r;\n          tr.appendChild(th);\n        }\n        th = document.createElement(\"th\");\n        if (colAttrs.length === 0) {\n          th.className = \"pvtTotalLabel\";\n          th.innerHTML = opts.localeStrings.totals;\n        }\n        tr.appendChild(th);\n        result.appendChild(tr);\n      }\n      for (i in rowKeys) {\n        if (!hasProp.call(rowKeys, i)) continue;\n        rowKey = rowKeys[i];\n        tr = document.createElement(\"tr\");\n        for (j in rowKey) {\n          if (!hasProp.call(rowKey, j)) continue;\n          txt = rowKey[j];\n          x = spanSize(rowKeys, parseInt(i), parseInt(j));\n          if (x !== -1) {\n            th = document.createElement(\"th\");\n            th.className = \"pvtRowLabel\";\n            th.textContent = txt;\n            if (!txt) {\n              th.textContent = \"(empty)\";\n              th.className += \" pvtEmptyLabel\";\n            }\n            th.setAttribute(\"rowspan\", x);\n            if (parseInt(j) === rowAttrs.length - 1 && colAttrs.length !== 0) {\n              th.setAttribute(\"colspan\", 2);\n            }\n            tr.appendChild(th);\n          }\n        }\n        for (j in colKeys) {\n          if (!hasProp.call(colKeys, j)) continue;\n          colKey = colKeys[j];\n          aggregator = pivotData.getAggregator(rowKey, colKey);\n          val = aggregator.value();\n          td = document.createElement(\"td\");\n          cellHeader = PivotData.convertValueToClassname(colKey);\n          if (val && val[0] && typeof aggregator.formatHtml === 'function') {\n            htmlEl = aggregator.formatHtml(val, rowKey, colKey, aggregator.type);\n            td.setAttribute(\"data-value\", val[0]);\n            td.appendChild(htmlEl);\n          } else if (val && val[0]) {\n            cellValue = PivotData.convertValueToClassname(val[0]);\n            td.setAttribute(\"data-value\", val[0]);\n            td.textContent = aggregator.format(val[0]);\n          } else {\n            td.setAttribute(\"data-value\", val);\n            td.textContent = aggregator.format(val);\n            cellValue = PivotData.convertValueToClassname(val);\n          }\n          td.className = \"pvtVal row\" + i + \" col\" + j + \" cell-\" + cellHeader + \"-\" + cellValue;\n          tr.appendChild(td);\n        }\n        totalAggregator = pivotData.getAggregator(rowKey, []);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal rowTotal\";\n        if (val && val[0] && typeof aggregator.formatHtml === 'function') {\n          td.setAttribute(\"data-value\", val[0]);\n          htmlEl = totalAggregator.formatHtml(val);\n          td.appendChild(htmlEl);\n        } else if (val && val[0]) {\n          td.setAttribute(\"data-value\", val[0]);\n          td.textContent = totalAggregator.format(val[0]);\n        } else {\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n        }\n        td.setAttribute(\"data-for\", \"row\" + i);\n        tr.appendChild(td);\n        result.appendChild(tr);\n      }\n      tr = document.createElement(\"tr\");\n      th = document.createElement(\"th\");\n      th.className = \"pvtTotalLabel\";\n      th.innerHTML = opts.localeStrings.totals;\n      th.setAttribute(\"colspan\", rowAttrs.length + (colAttrs.length === 0 ? 0 : 1));\n      tr.appendChild(th);\n      for (j in colKeys) {\n        if (!hasProp.call(colKeys, j)) continue;\n        colKey = colKeys[j];\n        totalAggregator = pivotData.getAggregator([], colKey);\n        val = totalAggregator.value();\n        td = document.createElement(\"td\");\n        td.className = \"pvtTotal colTotal\";\n        if (val && val[0] && typeof aggregator.formatHtml === 'function') {\n          td.setAttribute(\"data-value\", val[0]);\n          htmlEl = totalAggregator.formatHtml(val);\n          td.appendChild(htmlEl);\n        } else if (val && val[0]) {\n          td.setAttribute(\"data-value\", val[0]);\n          td.textContent = totalAggregator.format(val[0]);\n        } else {\n          td.textContent = totalAggregator.format(val);\n          td.setAttribute(\"data-value\", val);\n        }\n        td.setAttribute(\"data-for\", \"col\" + j);\n        tr.appendChild(td);\n      }\n      totalAggregator = pivotData.getAggregator([], []);\n      val = totalAggregator.value();\n      td = document.createElement(\"td\");\n      td.className = \"pvtGrandTotal\";\n      if (val && val[0] && typeof aggregator.formatHtml === 'function') {\n        td.setAttribute(\"data-value\", val[0]);\n        htmlEl = totalAggregator.formatHtml(val);\n        td.appendChild(htmlEl);\n      } else if (val && val[0]) {\n        td.setAttribute(\"data-value\", val[0]);\n        td.textContent = totalAggregator.format(val[0]);\n      } else {\n        td.textContent = totalAggregator.format(val);\n        td.setAttribute(\"data-value\", val);\n      }\n      tr.appendChild(td);\n      result.appendChild(tr);\n      result.setAttribute(\"data-numrows\", rowKeys.length);\n      result.setAttribute(\"data-numcols\", colKeys.length);\n      return result;\n    };\n\n    /*\n    Pivot Table core: create PivotData object and call Renderer on it\n     */\n    $.fn.pivot = function(input, opts) {\n      var defaults, e, error, error1, pivotData, result, x;\n      defaults = {\n        cols: [],\n        rows: [],\n        vals: [],\n        filter: function() {\n          return true;\n        },\n        aggregator: aggregatorTemplates.count()(),\n        aggregatorName: \"Count\",\n        sorters: function() {},\n        derivedAttributes: {},\n        renderer: pivotTableRenderer,\n        rendererOptions: null,\n        localeStrings: locales.en.localeStrings\n      };\n      opts = $.extend(defaults, opts);\n      result = null;\n      try {\n        pivotData = new PivotData(input, opts);\n        try {\n          result = opts.renderer(pivotData, opts.rendererOptions);\n        } catch (error) {\n          e = error;\n          if (typeof console !== \"undefined\" && console !== null) {\n            console.error(e.stack);\n          }\n          result = $(\"<span>\").html(opts.localeStrings.renderError);\n        }\n      } catch (error1) {\n        e = error1;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        result = $(\"<span>\").html(opts.localeStrings.computeError);\n      }\n      x = this[0];\n      while (x.hasChildNodes()) {\n        x.removeChild(x.lastChild);\n      }\n      return this.append(result);\n    };\n\n    /*\n    Pivot Table UI: calls Pivot Table core above with options set by user\n     */\n    $.fn.pivotUI = function(input, inputOpts, overwrite, locale) {\n      var a, aggregator, attrLength, axisValues, c, colList, defaults, e, error, existingOpts, fn, i, initialRender, k, l, len1, len2, len3, len4, n, o, opts, pivotTable, q, ref, ref1, ref2, ref3, ref4, refresh, refreshDelayed, renderer, rendererControl, shownAttributes, tblCols, tr1, tr2, uiTable, unusedAttrsVerticalAutoCutoff, unusedAttrsVerticalAutoOverride, x;\n      if (overwrite == null) {\n        overwrite = false;\n      }\n      if (locale == null) {\n        locale = \"en\";\n      }\n      if (locales[locale] == null) {\n        locale = \"en\";\n      }\n      defaults = {\n        derivedAttributes: {},\n        aggregators: locales[locale].aggregators,\n        renderers: locales[locale].renderers,\n        hiddenAttributes: [],\n        menuLimit: 200,\n        cols: [],\n        rows: [],\n        vals: [],\n        exclusions: {},\n        inclusions: {},\n        unusedAttrsVertical: 85,\n        autoSortUnusedAttrs: false,\n        rendererOptions: {\n          localeStrings: locales[locale].localeStrings\n        },\n        onRefresh: null,\n        filter: function() {\n          return true;\n        },\n        sorters: function() {},\n        localeStrings: locales[locale].localeStrings\n      };\n      existingOpts = this.data(\"pivotUIOptions\");\n      if ((existingOpts == null) || overwrite) {\n        opts = $.extend(defaults, inputOpts);\n      } else {\n        opts = existingOpts;\n      }\n      try {\n        input = PivotData.convertToArray(input);\n        tblCols = (function() {\n          var ref, results;\n          ref = input[0];\n          results = [];\n          for (k in ref) {\n            if (!hasProp.call(ref, k)) continue;\n            results.push(k);\n          }\n          return results;\n        })();\n        ref = opts.derivedAttributes;\n        for (c in ref) {\n          if (!hasProp.call(ref, c)) continue;\n          if ((indexOf.call(tblCols, c) < 0)) {\n            tblCols.push(c);\n          }\n        }\n        axisValues = {};\n        for (l = 0, len1 = tblCols.length; l < len1; l++) {\n          x = tblCols[l];\n          axisValues[x] = {};\n        }\n        PivotData.forEachRecord(input, opts.derivedAttributes, function(record) {\n          var base, results, v;\n          results = [];\n          for (k in record) {\n            if (!hasProp.call(record, k)) continue;\n            v = record[k];\n            if (!(opts.filter(record))) {\n              continue;\n            }\n            if (v == null) {\n              v = \"null\";\n            }\n            if ((base = axisValues[k])[v] == null) {\n              base[v] = 0;\n            }\n            results.push(axisValues[k][v]++);\n          }\n          return results;\n        });\n        uiTable = $(\"<table>\", {\n          \"class\": \"pvtUi\"\n        }).attr(\"cellpadding\", 5);\n        rendererControl = $(\"<td>\");\n        renderer = $(\"<select>\").addClass('pvtRenderer').appendTo(rendererControl).bind(\"change\", function() {\n          return refresh();\n        });\n        ref1 = opts.renderers;\n        for (x in ref1) {\n          if (!hasProp.call(ref1, x)) continue;\n          $(\"<option>\").val(x).html(x).appendTo(renderer);\n        }\n        colList = $(\"<td>\").addClass('pvtAxisContainer pvtUnused');\n        shownAttributes = (function() {\n          var len2, n, results;\n          results = [];\n          for (n = 0, len2 = tblCols.length; n < len2; n++) {\n            c = tblCols[n];\n            if (indexOf.call(opts.hiddenAttributes, c) < 0) {\n              results.push(c);\n            }\n          }\n          return results;\n        })();\n        unusedAttrsVerticalAutoOverride = false;\n        if (opts.unusedAttrsVertical === \"auto\") {\n          unusedAttrsVerticalAutoCutoff = 120;\n        } else {\n          unusedAttrsVerticalAutoCutoff = parseInt(opts.unusedAttrsVertical);\n        }\n        if (!isNaN(unusedAttrsVerticalAutoCutoff)) {\n          attrLength = 0;\n          for (n = 0, len2 = shownAttributes.length; n < len2; n++) {\n            a = shownAttributes[n];\n            attrLength += a.length;\n          }\n          unusedAttrsVerticalAutoOverride = attrLength > unusedAttrsVerticalAutoCutoff;\n        }\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          colList.addClass('pvtVertList');\n        } else {\n          colList.addClass('pvtHorizList');\n        }\n        fn = function(c) {\n          var attrElem, btns, checkContainer, filterItem, filterItemExcluded, hasExcludedItem, keys, len3, o, ref2, showFilterList, triangleLink, updateFilter, v, valueList;\n          keys = (function() {\n            var results;\n            results = [];\n            for (k in axisValues[c]) {\n              results.push(k);\n            }\n            return results;\n          })();\n          hasExcludedItem = false;\n          valueList = $(\"<div>\").addClass('pvtFilterBox').hide();\n          valueList.append($(\"<h4>\").text(c + \" (\" + keys.length + \")\"));\n          if (keys.length > opts.menuLimit) {\n            valueList.append($(\"<p>\").html(opts.localeStrings.tooMany));\n          } else {\n            btns = $(\"<p>\").appendTo(valueList);\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectAll).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", true);\n            }));\n            btns.append($(\"<button>\", {\n              type: \"button\"\n            }).html(opts.localeStrings.selectNone).bind(\"click\", function() {\n              return valueList.find(\"input:visible\").prop(\"checked\", false);\n            }));\n            btns.append($(\"<br>\"));\n            btns.append($(\"<input>\", {\n              type: \"text\",\n              placeholder: opts.localeStrings.filterResults,\n              \"class\": \"pvtSearch\"\n            }).bind(\"keyup\", function() {\n              var filter;\n              filter = $(this).val().toLowerCase();\n              return valueList.find('.pvtCheckContainer p').each(function() {\n                var testString;\n                testString = $(this).text().toLowerCase().indexOf(filter);\n                if (testString !== -1) {\n                  return $(this).show();\n                } else {\n                  return $(this).hide();\n                }\n              });\n            }));\n            checkContainer = $(\"<div>\").addClass(\"pvtCheckContainer\").appendTo(valueList);\n            ref2 = keys.sort(getSort(opts.sorters, c));\n            for (o = 0, len3 = ref2.length; o < len3; o++) {\n              k = ref2[o];\n              v = axisValues[c][k];\n              filterItem = $(\"<label>\");\n              filterItemExcluded = false;\n              if (opts.inclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.inclusions[c], k) < 0);\n              } else if (opts.exclusions[c]) {\n                filterItemExcluded = (indexOf.call(opts.exclusions[c], k) >= 0);\n              }\n              hasExcludedItem || (hasExcludedItem = filterItemExcluded);\n              $(\"<input>\").attr(\"type\", \"checkbox\").addClass('pvtFilter').attr(\"checked\", !filterItemExcluded).data(\"filter\", [c, k]).appendTo(filterItem);\n              filterItem.append($(\"<span>\").text(k));\n              filterItem.append($(\"<span>\").text(\" (\" + v + \")\"));\n              checkContainer.append($(\"<p>\").append(filterItem));\n            }\n          }\n          updateFilter = function() {\n            var unselectedCount;\n            unselectedCount = valueList.find(\"[type='checkbox']\").length - valueList.find(\"[type='checkbox']:checked\").length;\n            if (unselectedCount > 0) {\n              attrElem.addClass(\"pvtFilteredAttribute\");\n            } else {\n              attrElem.removeClass(\"pvtFilteredAttribute\");\n            }\n            if (keys.length > opts.menuLimit) {\n              return valueList.toggle();\n            } else {\n              return valueList.toggle(0, refresh);\n            }\n          };\n          $(\"<p>\").appendTo(valueList).append($(\"<button>\", {\n            type: \"button\"\n          }).text(\"OK\").bind(\"click\", updateFilter));\n          showFilterList = function(e) {\n            var clickLeft, clickTop, ref3;\n            ref3 = $(e.currentTarget).position(), clickLeft = ref3.left, clickTop = ref3.top;\n            valueList.css({\n              left: clickLeft + 10,\n              top: clickTop + 10\n            }).toggle();\n            valueList.find('.pvtSearch').val('');\n            return valueList.find('.pvtCheckContainer p').show();\n          };\n          triangleLink = $(\"<span>\").addClass('pvtTriangle').html(\" &#x25BE;\").bind(\"click\", showFilterList);\n          attrElem = $(\"<li>\").addClass(\"axis_\" + i).append($(\"<span>\").addClass('pvtAttr').text(c).data(\"attrName\", c).append(triangleLink));\n          if (hasExcludedItem) {\n            attrElem.addClass('pvtFilteredAttribute');\n          }\n          colList.append(attrElem).append(valueList);\n          return attrElem.bind(\"dblclick\", showFilterList);\n        };\n        for (i in shownAttributes) {\n          if (!hasProp.call(shownAttributes, i)) continue;\n          c = shownAttributes[i];\n          fn(c);\n        }\n        tr1 = $(\"<tr>\").appendTo(uiTable);\n        aggregator = $(\"<select>\").addClass('pvtAggregator').bind(\"change\", function() {\n          return refresh();\n        });\n        ref2 = opts.aggregators;\n        for (x in ref2) {\n          if (!hasProp.call(ref2, x)) continue;\n          aggregator.append($(\"<option>\").val(x).html(x));\n        }\n        $(\"<td>\").addClass('pvtVals').appendTo(tr1).append(aggregator).append($(\"<br>\"));\n        $(\"<td>\").addClass('pvtAxisContainer pvtHorizList pvtCols').appendTo(tr1);\n        tr2 = $(\"<tr>\").appendTo(uiTable);\n        tr2.append($(\"<td>\").addClass('pvtAxisContainer pvtRows').attr(\"valign\", \"top\"));\n        pivotTable = $(\"<td>\").attr(\"valign\", \"top\").addClass('pvtRendererArea').appendTo(tr2);\n        if (opts.unusedAttrsVertical === true || unusedAttrsVerticalAutoOverride) {\n          uiTable.find('tr:nth-child(1)').prepend(rendererControl);\n          uiTable.find('tr:nth-child(2)').prepend(colList);\n        } else {\n          uiTable.prepend($(\"<tr>\").append(rendererControl).append(colList));\n        }\n        this.html(uiTable);\n        ref3 = opts.cols;\n        for (o = 0, len3 = ref3.length; o < len3; o++) {\n          x = ref3[o];\n          this.find(\".pvtCols\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        ref4 = opts.rows;\n        for (q = 0, len4 = ref4.length; q < len4; q++) {\n          x = ref4[q];\n          this.find(\".pvtRows\").append(this.find(\".axis_\" + ($.inArray(x, shownAttributes))));\n        }\n        if (opts.aggregatorName != null) {\n          this.find(\".pvtAggregator\").val(opts.aggregatorName);\n        }\n        if (opts.rendererName != null) {\n          this.find(\".pvtRenderer\").val(opts.rendererName);\n        }\n        initialRender = true;\n        refreshDelayed = (function(_this) {\n          return function() {\n            var attr, exclusions, inclusions, len5, newDropdown, numInputsToProcess, pivotUIOptions, pvtVals, ref5, ref6, s, subopts, t, unusedAttrsContainer, vals;\n            subopts = {\n              derivedAttributes: opts.derivedAttributes,\n              localeStrings: opts.localeStrings,\n              rendererOptions: opts.rendererOptions,\n              sorters: opts.sorters,\n              cols: [],\n              rows: []\n            };\n            numInputsToProcess = (ref5 = opts.aggregators[aggregator.val()]([])().numInputs) != null ? ref5 : 0;\n            vals = [];\n            _this.find(\".pvtRows li span.pvtAttr\").each(function() {\n              return subopts.rows.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtCols li span.pvtAttr\").each(function() {\n              return subopts.cols.push($(this).data(\"attrName\"));\n            });\n            _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n              if (numInputsToProcess === 0) {\n                return $(this).remove();\n              } else {\n                numInputsToProcess--;\n                if ($(this).val() !== \"\") {\n                  return vals.push($(this).val());\n                }\n              }\n            });\n            if (numInputsToProcess !== 0) {\n              pvtVals = _this.find(\".pvtVals\");\n              for (x = s = 0, ref6 = numInputsToProcess; 0 <= ref6 ? s < ref6 : s > ref6; x = 0 <= ref6 ? ++s : --s) {\n                newDropdown = $(\"<select>\").addClass('pvtAttrDropdown').append($(\"<option>\")).bind(\"change\", function() {\n                  return refresh();\n                });\n                for (t = 0, len5 = shownAttributes.length; t < len5; t++) {\n                  attr = shownAttributes[t];\n                  newDropdown.append($(\"<option>\").val(attr).text(attr));\n                }\n                pvtVals.append(newDropdown);\n              }\n            }\n            if (initialRender) {\n              vals = opts.vals;\n              i = 0;\n              _this.find(\".pvtVals select.pvtAttrDropdown\").each(function() {\n                $(this).val(vals[i]);\n                return i++;\n              });\n              initialRender = false;\n            }\n            subopts.aggregatorName = aggregator.val();\n            subopts.vals = vals;\n            subopts.aggregator = opts.aggregators[aggregator.val()](vals);\n            subopts.renderer = opts.renderers[renderer.val()];\n            exclusions = {};\n            _this.find('input.pvtFilter').not(':checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                return exclusions[filter[0]].push(filter[1]);\n              } else {\n                return exclusions[filter[0]] = [filter[1]];\n              }\n            });\n            inclusions = {};\n            _this.find('input.pvtFilter:checked').each(function() {\n              var filter;\n              filter = $(this).data(\"filter\");\n              if (exclusions[filter[0]] != null) {\n                if (inclusions[filter[0]] != null) {\n                  return inclusions[filter[0]].push(filter[1]);\n                } else {\n                  return inclusions[filter[0]] = [filter[1]];\n                }\n              }\n            });\n            subopts.filter = function(record) {\n              var excludedItems, ref7;\n              if (!opts.filter(record)) {\n                return false;\n              }\n              for (k in exclusions) {\n                excludedItems = exclusions[k];\n                if (ref7 = \"\" + record[k], indexOf.call(excludedItems, ref7) >= 0) {\n                  return false;\n                }\n              }\n              return true;\n            };\n            pivotTable.pivot(input, subopts);\n            pivotUIOptions = $.extend(opts, {\n              cols: subopts.cols,\n              rows: subopts.rows,\n              vals: vals,\n              exclusions: exclusions,\n              inclusions: inclusions,\n              inclusionsInfo: inclusions,\n              aggregatorName: aggregator.val(),\n              rendererName: renderer.val()\n            });\n            _this.data(\"pivotUIOptions\", pivotUIOptions);\n            if (opts.autoSortUnusedAttrs) {\n              unusedAttrsContainer = _this.find(\"td.pvtUnused.pvtAxisContainer\");\n              $(unusedAttrsContainer).children(\"li\").sort(function(a, b) {\n                return naturalSort($(a).text(), $(b).text());\n              }).appendTo(unusedAttrsContainer);\n            }\n            pivotTable.css(\"opacity\", 1);\n            if (opts.onRefresh != null) {\n              return opts.onRefresh(pivotUIOptions);\n            }\n          };\n        })(this);\n        refresh = (function(_this) {\n          return function() {\n            pivotTable.css(\"opacity\", 0.5);\n            return setTimeout(refreshDelayed, 10);\n          };\n        })(this);\n        refresh();\n        this.find(\".pvtAxisContainer\").sortable({\n          update: function(e, ui) {\n            if (ui.sender == null) {\n              return refresh();\n            }\n          },\n          connectWith: this.find(\".pvtAxisContainer\"),\n          items: 'li',\n          placeholder: 'pvtPlaceholder'\n        });\n      } catch (error) {\n        e = error;\n        if (typeof console !== \"undefined\" && console !== null) {\n          console.error(e.stack);\n        }\n        this.html(opts.localeStrings.uiRenderError);\n      }\n      return this;\n    };\n\n    /*\n    Heatmap post-processing\n     */\n    $.fn.heatmap = function(scope) {\n      var colorGen, heatmapper, i, j, l, n, numCols, numRows, ref, ref1;\n      if (scope == null) {\n        scope = \"heatmap\";\n      }\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      colorGen = function(color, min, max) {\n        var hexGen;\n        hexGen = (function() {\n          switch (color) {\n            case \"red\":\n              return function(hex) {\n                return \"ff\" + hex + hex;\n              };\n            case \"green\":\n              return function(hex) {\n                return hex + \"ff\" + hex;\n              };\n            case \"blue\":\n              return function(hex) {\n                return \"\" + hex + hex + \"ff\";\n              };\n          }\n        })();\n        return function(x) {\n          var hex, intensity;\n          intensity = 255 - Math.round(255 * (x - min) / (max - min));\n          hex = intensity.toString(16).split(\".\")[0];\n          if (hex.length === 1) {\n            hex = 0 + hex;\n          }\n          return hexGen(hex);\n        };\n      };\n      heatmapper = (function(_this) {\n        return function(scope, color) {\n          var colorFor, forEachCell, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          colorFor = colorGen(color, Math.min.apply(Math, values), Math.max.apply(Math, values));\n          return forEachCell(function(x, elem) {\n            return elem.css(\"background-color\", \"#\" + colorFor(x));\n          });\n        };\n      })(this);\n      switch (scope) {\n        case \"heatmap\":\n          heatmapper(\".pvtVal\", \"red\");\n          break;\n        case \"rowheatmap\":\n          for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n            heatmapper(\".pvtVal.row\" + i, \"red\");\n          }\n          break;\n        case \"colheatmap\":\n          for (j = n = 0, ref1 = numCols; 0 <= ref1 ? n < ref1 : n > ref1; j = 0 <= ref1 ? ++n : --n) {\n            heatmapper(\".pvtVal.col\" + j, \"red\");\n          }\n      }\n      heatmapper(\".pvtTotal.rowTotal\", \"red\");\n      heatmapper(\".pvtTotal.colTotal\", \"red\");\n      return this;\n    };\n\n    /*\n    Barchart post-processing\n     */\n    return $.fn.barchart = function() {\n      var barcharter, i, l, numCols, numRows, ref;\n      numRows = this.data(\"numrows\");\n      numCols = this.data(\"numcols\");\n      barcharter = (function(_this) {\n        return function(scope) {\n          var forEachCell, max, scaler, values;\n          forEachCell = function(f) {\n            return _this.find(scope).each(function() {\n              var x;\n              x = $(this).data(\"value\");\n              if ((x != null) && isFinite(x)) {\n                return f(x, $(this));\n              }\n            });\n          };\n          values = [];\n          forEachCell(function(x) {\n            return values.push(x);\n          });\n          max = Math.max.apply(Math, values);\n          scaler = function(x) {\n            return 100 * x / (1.4 * max);\n          };\n          return forEachCell(function(x, elem) {\n            var text, wrapper;\n            text = elem.text();\n            wrapper = $(\"<div>\").css({\n              \"position\": \"relative\",\n              \"height\": \"55px\"\n            });\n            wrapper.append($(\"<div>\").css({\n              \"position\": \"absolute\",\n              \"bottom\": 0,\n              \"left\": 0,\n              \"right\": 0,\n              \"height\": scaler(x) + \"%\",\n              \"background-color\": \"gray\"\n            }));\n            wrapper.append($(\"<div>\").text(text).css({\n              \"position\": \"relative\",\n              \"padding-left\": \"5px\",\n              \"padding-right\": \"5px\"\n            }));\n            return elem.css({\n              \"padding\": 0,\n              \"padding-top\": \"5px\",\n              \"text-align\": \"center\"\n            }).html(wrapper);\n          });\n        };\n      })(this);\n      for (i = l = 0, ref = numRows; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {\n        barcharter(\".pvtVal.row\" + i);\n      }\n      barcharter(\".pvtTotal.colTotal\");\n      return this;\n    };\n  });\n\n}).call(this);\n\n//# sourceMappingURL=pivot.js.map\n"],"sourceRoot":"/source/"}